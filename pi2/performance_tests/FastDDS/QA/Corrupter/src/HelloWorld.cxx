// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorld.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "HelloWorld.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

HelloWorld::HelloWorld()
{
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@4f51b3e0
    m_message ="";
    // m_instanceID com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b9e255
    m_instanceID = 0.0;
    // m_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e57643e
    m_value = 0.0;
    // m_arr com.eprosima.idl.parser.typecode.ArrayTypeCode@133e16fd
    memset(&m_arr, 0, (8) * 8);

}

HelloWorld::~HelloWorld()
{




}

HelloWorld::HelloWorld(const HelloWorld &x)
{
    m_message = x.m_message;
    m_instanceID = x.m_instanceID;
    m_value = x.m_value;
    m_arr = x.m_arr;
}

HelloWorld::HelloWorld(HelloWorld &&x)
{
    m_message = std::move(x.m_message);
    m_instanceID = x.m_instanceID;
    m_value = x.m_value;
    m_arr = std::move(x.m_arr);
}

HelloWorld& HelloWorld::operator=(const HelloWorld &x)
{

    m_message = x.m_message;
    m_instanceID = x.m_instanceID;
    m_value = x.m_value;
    m_arr = x.m_arr;

    return *this;
}

HelloWorld& HelloWorld::operator=(HelloWorld &&x)
{

    m_message = std::move(x.m_message);
    m_instanceID = x.m_instanceID;
    m_value = x.m_value;
    m_arr = std::move(x.m_arr);

    return *this;
}

size_t HelloWorld::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((8) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t HelloWorld::getCdrSerializedSize(const HelloWorld& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((8) > 0)
    {
        current_alignment += ((8) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }


    return current_alignment - initial_alignment;
}

void HelloWorld::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_message;
    scdr << m_instanceID;
    scdr << m_value;
    scdr << m_arr;

}

void HelloWorld::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_message;
    dcdr >> m_instanceID;
    dcdr >> m_value;
    dcdr >> m_arr;

}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void HelloWorld::message(const std::string &_message)
{
m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void HelloWorld::message(std::string &&_message)
{
m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& HelloWorld::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& HelloWorld::message()
{
    return m_message;
}
/*!
 * @brief This function sets a value in member instanceID
 * @param _instanceID New value for member instanceID
 */
void HelloWorld::instanceID(double _instanceID)
{
m_instanceID = _instanceID;
}

/*!
 * @brief This function returns the value of member instanceID
 * @return Value of member instanceID
 */
double HelloWorld::instanceID() const
{
    return m_instanceID;
}

/*!
 * @brief This function returns a reference to member instanceID
 * @return Reference to member instanceID
 */
double& HelloWorld::instanceID()
{
    return m_instanceID;
}

/*!
 * @brief This function sets a value in member value
 * @param _value New value for member value
 */
void HelloWorld::value(double _value)
{
m_value = _value;
}

/*!
 * @brief This function returns the value of member value
 * @return Value of member value
 */
double HelloWorld::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
double& HelloWorld::value()
{
    return m_value;
}

/*!
 * @brief This function copies the value in member arr
 * @param _arr New value to be copied in member arr
 */
void HelloWorld::arr(const std::array<double, 8> &_arr)
{
m_arr = _arr;
}

/*!
 * @brief This function moves the value in member arr
 * @param _arr New value to be moved in member arr
 */
void HelloWorld::arr(std::array<double, 8> &&_arr)
{
m_arr = std::move(_arr);
}

/*!
 * @brief This function returns a constant reference to member arr
 * @return Constant reference to member arr
 */
const std::array<double, 8>& HelloWorld::arr() const
{
    return m_arr;
}

/*!
 * @brief This function returns a reference to member arr
 * @return Reference to member arr
 */
std::array<double, 8>& HelloWorld::arr()
{
    return m_arr;
}

size_t HelloWorld::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool HelloWorld::isKeyDefined()
{
   return true;
}

void HelloWorld::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
}
